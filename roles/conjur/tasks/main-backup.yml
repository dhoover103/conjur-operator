---
# tasks file for conjur
#

- name: Create ingress service
  k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ $fullName }}-ingress"
        labels: &AppConjurLabels
          app: {{ meta.name }}
          release: {{ meta.name }}
          app.kubernetes.io/name: {{ meta.name }}
          app.kubernetes.io/component: service
#      {{- with conjurLabels }}
#      "{{ toYaml . | indent 4 }}"
#      {{- end }}
        annotations: {{ service.external.annotations }}
#      {{- with service.external.annotations }}
#      {{ toYaml . | indent 4 }}
#      {{ end -}}
      spec:
        type: LoadBalancer
        selector: *AppConjurLabels
        ports:
          - name: https
            protocol: TCP
            targetPort: https
            port: {{ service.external.port }}
#      {{- end }}

- name: Create ConfigMap
  k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ meta.name }}-conjur-nginx-configmap"
        namespace: {{ meta.namespace }}
        labels:
          release: {{ meta.name }}
      data:
        nginx_conf: {{ tpl (.Files.Get "files/nginx.conf") . | quote }}
        mime_types: {{ tpl (.Files.Get "files/mime.types") . | quote }}
        conjur_site: {{ tpl (.Files.Get "files/conjur.conf") . | quote }}
        dhparams: {{ tpl (.Files.Get "files/dhparams.pem") . | quote }}

- name: Create PVC
  when: {{ postgres.persistentVolume.create }}
  k8s:
    definition:
#      {{ if postgres.persistentVolume.create }}
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "{{ meta.name }}-conjur-oss-pvc"
        labels:
          app: {{ meta.name }}
          release: {{ meta.name }}
          app.kubernetes.io/name: {{ meta.name }}
          app.kubernetes.io/component: pvc
      {{- with conjurLabels }}
      {{ toYaml . | indent 4 }}
      {{- end }}
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ postgres.persistentVolume.size }}
        {{ if postgres.persistentVolume.storageClass }}
        storageClassName: {{ postgres.persistentVolume.storageClass }}
        {{ end }}

- name: Create postgres service
  when: databaseUrl == ""
  k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ meta.name }}-postgres"
        labels: &AppPostgresServiceLabels
          app: "{{ meta.name }}-postgres"
          release: {{ meta.name }}
          app.kubernetes.io/name: {{ meta.name }}
          app.kubernetes.io/component: postgres
      {{- with postgresLabels }}
      {{ toYaml . | indent 4 }}
      {{- end }}
      spec:
        ports:
        - port: 5432
        selector: *AppPostgresServiceLabels
      ---

- name: Create postgres deployment
  when: databaseUrl == ""
  k8s:
    definition:
      apiVersion: apps/v1beta2
      kind: Deployment
      metadata:
        name: "{{ meta.name }}-postgres"
        labels: &AppPostgresLabels
          app: "{{ meta.name }}-postgres"
          release: {{ meta.name }}
          app.kubernetes.io/name: {{ meta.name }}
          app.kubernetes.io/component: postgres
      {{- with postgresLabels }}
      {{ toYaml . | indent 4 }}
      {{- end }}
      spec:
        replicas: 1
        selector:
          matchLabels: *AppPostgresLabels
        template:
          metadata:
            labels: *AppPostgresLabels
          spec:
            containers:
            - image: "{{ postgres.image.repository }}:{{ postgres.image.tag }}"
              imagePullPolicy: {{ postgres.image.pullPolicy }}
              name: postgres
      {{ if postgres.persistentVolume.create }}
              volumeMounts:
              - mountPath: "/var/lib/postgresql"
                name: postgres-data
            volumes:
            - name: postgres-data
              persistentVolumeClaim:
                claimName: "{{ meta.name }}-conjur-oss-pvc"
      {{- end }}

- name: Create secret
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ meta.name }}-conjur-authenticators"
        labels:
          app: {{ meta.name }}
          release: {{ meta.name }}
          app.kubernetes.io/name: {{ meta.name }}
          app.kubernetes.io/component: service
      {{- with conjurLabels }}
      {{ toYaml . | indent 4 }}
      {{- end }}
      type: Opaque
      data:
        key: "{{ authenticators | b64enc }}"
      ---

- name: Create secret
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ meta.name }}-conjur-data-key"
        labels:
          app: {{ meta.name }}
          release: {{ meta.name }}
          app.kubernetes.io/name: {{ meta.name }}
          app.kubernetes.io/component: service
      {{- with conjurLabels }}
      {{ toYaml . | indent 4 }}
      {{- end }}
      type: Opaque
      data:
        key: "{{ required "'dataKey' has no value, it must be provided!" dataKey | b64enc }}"

- name: Create secret
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ meta.name }}-conjur-database-url"
        labels:
          app: {{ meta.name }}
          release: {{ meta.name }}
          app.kubernetes.io/name: {{ meta.name }}
          app.kubernetes.io/component: service
      {{- with conjurLabels }}
      {{ toYaml . | indent 4 }}
      {{- end }}
      type: Opaque
      data:
        {{ if databaseUrl }}
        key: {{ databaseUrl | b64enc }}
        {{ else }}
        key: {{ printf "postgres://postgres@%v-postgres/postgres" meta.name | b64enc }}
        {{ end }}

- name: Create service
  k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: {{ meta.name }}
        labels: &AppConjurLabels
          app: {{ meta.name }}
          release: {{ meta.name }}
          app.kubernetes.io/name: {{ meta.name }}
          app.kubernetes.io/component: service
      {{- with conjurLabels }}
      {{ toYaml . | indent 4 }}
      {{- end }}
      {{- with service.internal.annotations }}
        annotations:
      {{ toYaml . | indent 4 }}
      {{- end }}
      spec:
        type: {{ service.internal.type }}
        ports:
          - port: {{ service.internal.port }}
            targetPort: https
            protocol: TCP
            name: https
        selector: *AppConjurLabels

      {{- $ssl := . }}
      {{- include "conjur-oss.ssl-cert-gen" $ssl }}
- name: Create secret
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: {{ meta.name }}-conjur-ssl-ca-cert
        labels:
          app: {{ meta.name }}
          release: {{ meta.name }}
          app.kubernetes.io/name: {{ meta.name }}
          app.kubernetes.io/component: ssl-cert
      {{- with conjurLabels }}
      {{ toYaml . | indent 4 }}
      {{- end }}
      type: kubernetes.io/tls
      data:
        tls.crt: {{ .caCrt }}
        tls.key: {{ .caKey }}
      ---

- name: Create secret
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ meta.name }}-conjur-ssl-cert"
        labels:
          app: {{ meta.name }}
          release: {{ meta.name }}
          app.kubernetes.io/name: {{ meta.name }}
          app.kubernetes.io/component: ssl-cert
      {{- with conjurLabels }}
      {{ toYaml . | indent 4 }}
      {{- end }}
      type: kubernetes.io/tls
      data:
        tls.crt: {{ .certCrt }}
        tls.key: {{ .certKey }}

- name: Create deployment
  k8s:
    definition:
      apiVersion: apps/v1beta2
      kind: Deployment
      metadata:
        name: {{ meta.name }}
        labels: &AppConjurLabels
          app: {{ meta.name }}
          release: {{ meta.name }}
          app.kubernetes.io/name: {{ meta.name }}
          app.kubernetes.io/component: service
      {{- with conjurLabels }}
      {{ toYaml . | indent 4 }}
      {{- end }}
      {{- with deployment.annotations }}
        annotations:
      {{ toYaml . | indent 4 }}
      {{- end }}
      spec:
        replicas: {{ replicaCount }}
        selector:
          matchLabels: *AppConjurLabels
        template:
          metadata:
            labels: *AppConjurLabels
          spec:
            serviceAccountName: {{ template "conjur-oss.service-account" . }}
            volumes:
            - name: "{{ meta.name }}-conjur-ssl-cert-volume"
              secret:
                secretName: "{{ meta.name }}-conjur-ssl-cert"
                # Permission == 0400. JSON spec doesn’t support octal notation.
                defaultMode: 256
            - name: "{{ meta.name }}-conjur-ssl-ca-cert-volume"
              secret:
                secretName: "{{ meta.name }}-conjur-ssl-ca-cert"
                # Permission == 0400. JSON spec doesn’t support octal notation.
                defaultMode: 256
            - name: "{{ meta.name }}-conjur-configmap-volume"
              configMap:
                name: "{{ meta.name }}-conjur-nginx-configmap"
                items:
                  - key: nginx_conf
                    path: nginx.conf
                  - key: mime_types
                    path: mime.types
                  - key: dhparams
                    path: dhparams.pem
                  - key: conjur_site
                    path: sites-enabled/conjur.conf
            containers:
            - name: "{{ meta.name }}-nginx"
              image: "{{ nginx.image.repository }}:{{ nginx.image.tag }}"
              imagePullPolicy: {{ nginx.image.pullPolicy }}
              ports:
              - containerPort: 9443
                name: https
              - containerPort: 9000
                name: http
              livenessProbe:
                httpGet:
                  path: /status
                  scheme: HTTPS
                  port: https
                initialDelaySeconds: 1
                periodSeconds: 5
                timeoutSeconds: 3
                # 1 seconds * 180 = 3 minutes
                failureThreshold: 180
              readinessProbe:
                httpGet:
                  path: /status
                  scheme: HTTPS
                  port: https
                initialDelaySeconds: 1
                periodSeconds: 5
                timeoutSeconds: 3
                # 1 seconds * 180 = 3 minutes
                failureThreshold: 180
              volumeMounts:
              - name: "{{ meta.name }}-conjur-ssl-cert-volume"
                mountPath: /opt/conjur/etc/ssl/cert
                readOnly: true
              - name: "{{ meta.name }}-conjur-ssl-ca-cert-volume"
                mountPath: /opt/conjur/etc/ssl/ca
                readOnly: true
              - name: "{{ meta.name }}-conjur-configmap-volume"
                mountPath: /etc/nginx
                readOnly: true
            - name: {{ meta.name }}
              image: "{{ image.repository }}:{{ image.tag }}"
              imagePullPolicy: {{ image.pullPolicy }}
              args: ["server"]
              ports:
                - name: http
                  containerPort: 80
                  protocol: TCP
              livenessProbe:
                httpGet:
                  path: /
                  port: 80
                initialDelaySeconds: 1
                periodSeconds: 5
                timeoutSeconds: 2
                # 1 seconds * 180 = 3 minutes
                failureThreshold: 180
              readinessProbe:
                httpGet:
                  path: /
                  port: http
                initialDelaySeconds: 1
                periodSeconds: 30
                timeoutSeconds: 30
                # 1 seconds * 180 = 3 minutes
                failureThreshold: 180
              env:
              - name: CONJUR_AUTHENTICATORS
                valueFrom:
                  secretKeyRef:
                    name: "{{ meta.name }}-conjur-authenticators"
                    key: key
              - name: CONJUR_DATA_KEY
                valueFrom:
                  secretKeyRef:
                    name: "{{ meta.name }}-conjur-data-key"
                    key: key
              - name: DATABASE_URL
                valueFrom:
                  secretKeyRef:
                    name: "{{ meta.name }}-conjur-database-url"
                    key: key
              - name: CONJUR_ACCOUNT
                value: {{ account }}
              resources:
      {{ toYaml resources | indent 12 }}
          {{- with nodeSelector }}
            nodeSelector:
      {{ toYaml . | indent 8 }}
          {{- end }}
          {{- with affinity }}
            affinity:
      {{ toYaml . | indent 8 }}
          {{- end }}
          {{- with tolerations }}
            tolerations:
      {{ toYaml . | indent 8 }}
          {{- end }}
      {{- if service.external.enabled -}}
      {{- $fullName := include "conjur-oss.fullname" . -}}
      ---

