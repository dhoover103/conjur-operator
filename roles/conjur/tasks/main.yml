---
# tasks file for conjur
#

- name: Create PVC
  when: postgres.persistentVolume.create
  k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "{{ meta.name }}-pvc"
        namespace: "{{ meta.namespace }}"
        labels:
          app: "{{ meta.name }}"
          release: "{{ meta.name }}"
          app.kubernetes.io/name: "{{ meta.name }}"
          app.kubernetes.io/component: pvc
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ postgres.persistentVolume.size }}"
          storageClassName: "{{ postgres.persistentVolume.storageClass }}"

- name: Create conjur service
  k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ meta.name }}"
        namespace: "{{ meta.namespace }}"
        labels: &AppConjurLabels
          app: "{{ meta.name }}"
          release: "{{ meta.name }}"
          app.kubernetes.io/name: "{{ meta.name }}"
          app.kubernetes.io/component: service
        annotations: 
          "{{ service.internal.annotations }}"
      spec:
        type: "{{ service.internal.type }}"
        ports:
          - port: 443 #"{{ service.internal.port | int }}" fix this line
            targetPort: https
            protocol: TCP
            name: https
        selector: *AppConjurLabels

- name: Create postgres service
  when: databaseUrl == "postgres://postgres-postgres/postgres"
  k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ meta.name }}-postgres"
        namespace: "{{ meta.namespace }}"
        labels: &AppPostgresServiceLabels
          app: "{{ meta.name }}-postgres"
          release: "{{ meta.name }}"
          app.kubernetes.io/name: "{{ meta.name }}"
          app.kubernetes.io/component: postgres
      spec:
        ports:
        - port: 5432
        selector: *AppPostgresServiceLabels

- name: Create ingress service
  when: service.external.enabled
  k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ meta.name }}-ingress"
        namespace: "{{ meta.namespace }}"
        labels: #&AppConjurLabels
          app: "{{ meta.name }}"
          release: "{{ meta.name }}"
          app.kubernetes.io/name: "{{ meta.name }}"
          app.kubernetes.io/component: service
        annotations: 
          "{{ service.external.annotations }}"
      spec:
        type: LoadBalancer
        selector: *AppConjurLabels
        ports:
          - name: https
            protocol: TCP
            targetPort: https
            port:  443 #"{{ service.external.port | int }}" fix this line

- name: Create ConfigMap
  k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ meta.name }}-conjur-nginx-configmap"
        namespace: "{{ meta.namespace }}"
        labels:
          release: "{{ meta.name }}"
      data:
#        nginx_conf: "{{ tpl (.Files.Get "files/nginx.conf") . | quote }}"
         nginx_conf: "{{ lookup ( 'file', 'nginx.conf' ) }}"
#        mime_types: "{{ tpl (.Files.Get "files/mime.types") . | quote }}"
         mime_types: "{{ lookup ( 'file', 'mime.types' ) }}"
#        conjur_site: "{{ tpl (.Files.Get "files/conjur.conf") . | quote }}"
         conjur_site: "{{ lookup ( 'file', 'conjur.conf' ) }}"
#        dhparams: "{{ tpl (.Files.Get "files/dhparams.pem") . | quote }}"
         dhparams: "{{ lookup ( 'file', 'dhparams.pem' ) }}"

- name: Create authenticators secret
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ meta.name }}-conjur-authenticators"
        namespace: "{{ meta.namespace }}"
        labels:
          app: "{{ meta.name }}"
          release: "{{ meta.name }}"
          app.kubernetes.io/name: "{{ meta.name }}"
          app.kubernetes.io/component: service
      type: Opaque
      data:
        key: "{{ authenticators | b64encode }}"

- name: Create data secret
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ meta.name }}-conjur-data-key"
        namespace: "{{ meta.namespace }}"
        labels:
          app: "{{ meta.name }}"
          release: "{{ meta.name }}"
          app.kubernetes.io/name: "{{ meta.name }}"
          app.kubernetes.io/component: service
      type: Opaque
      data:
        key: "{{ dataKey | b64encode }}"

- name: Create database url secret
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ meta.name }}-conjur-database-url"
        namespace: "{{ meta.namespace }}"
        labels:
          app: "{{ meta.name }}"
          release: "{{ meta.name }}"
          app.kubernetes.io/name: "{{ meta.name }}"
          app.kubernetes.io/component: service
      type: Opaque
      data:
#        "{{ if databaseUrl }}"
        key: "{{ databaseUrl | b64encode }}"
#        "{{ else }}"
#        key: "{{ printf "postgres://postgres@%v-postgres/postgres" meta.name }}"
#        "{{ end }}"


#      "{{- $ssl := . }}"
#      "{{- include "conjur-oss.ssl-cert-gen" $ssl }}"
- name: Create ca cert secret
  tags: testing
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ meta.name }}-conjur-ssl-ca-cert"
        namespace: "{{ meta.namespace }}"
        labels:
          app: "{{ meta.name }}"
          release: "{{ meta.name }}"
          app.kubernetes.io/name: "{{ meta.name }}"
          app.kubernetes.io/component: ssl-cert
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ caCrt | b64encode }}"
        tls.key: "{{ caKey | b64encode }}"

- name: Create ssl cert secret
  tags: testing
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ meta.name }}-conjur-ssl-cert"
        namespace: "{{ meta.namespace }}"
        labels:
          app: "{{ meta.name }}"
          release: "{{ meta.name }}"
          app.kubernetes.io/name: "{{ meta.name }}"
          app.kubernetes.io/component: ssl-cert
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ certCrt | b64encode }}"
        tls.key: "{{ certKey | b64encode }}"

- name: Create postgres deployment without pvc
  when: 
    - not postgres.persistentVolume.create
    - databaseUrl == "postgres://localhost"
  k8s:
    definition:
      apiVersion: apps/v1beta2
      kind: Deployment
      metadata:
        name: "{{ meta.name }}-postgres"
        namespace: "{{ meta.namespace }}"
        labels: &AppPostgresLabels
          app: "{{ meta.name }}-postgres"
          release: "{{ meta.name }}"
          app.kubernetes.io/name: "{{ meta.name }}"
      spec:
        replicas: 1
        selector:
          matchLabels: *AppPostgresLabels
        template:
          metadata:
            labels: *AppPostgresLabels
          spec:
            containers:
            - image: "{{ postgres.image.repository }}:{{ postgres.image.tag }}"
              imagePullPolicy: "{{ postgres.image.pullPolicy }}"
              name: postgres

- name: Create postgres deployment with pvc
  when: 
    - postgres.persistentVolume.create
    - databaseUrl == "postgres://localhost"
  k8s:
    definition:
      apiVersion: apps/v1beta2
      kind: Deployment
      metadata:
        name: "{{ meta.name }}-postgres"
        namespace: "{{ meta.namespace }}"
        labels: 
          app: "{{ meta.name }}-postgres"
          release: "{{ meta.name }}"
          app.kubernetes.io/name: "{{ meta.name }}"
          app.kubernetes.io/component: service
      spec:
        replicas: 1
        selector:
          matchLabels: *AppPostgresLabels
        template:
          metadata:
            labels: *AppPostgresLabels
          spec:
            containers:
            - image: "{{ postgres.image.repository }}:{{ postgres.image.tag }}"
              imagePullPolicy: "{{ postgres.image.pullPolicy }}"
              name: postgres
              volumeMounts:
              - mountPath: "/var/lib/postgresql"
                name: postgres-data
            volumes:
            - name: postgres-data
              persistentVolumeClaim:
                claimName: "{{ meta.name }}-pvc"

- name: Create conjur deployment
  k8s:
    definition:
      apiVersion: apps/v1beta2
      kind: Deployment
      metadata:
        name: "{{ meta.name }}"
        namespace: "{{ meta.namespace }}"
        labels: 
          app: "{{ meta.name }}"
          release: "{{ meta.name }}"
          app.kubernetes.io/name: "{{ meta.name }}"
          app.kubernetes.io/component: service
        annotations:
          "{{ deployment.annotations }}"
      spec:
        replicas: "{{ replicaCount }}"
        selector:
          matchLabels: *AppConjurLabels
        template:
          metadata:
            labels: *AppConjurLabels
          spec:
            serviceAccountName: "{{ serviceAccount.name }}"
            volumes:
            - name: "{{ meta.name }}-conjur-ssl-cert-volume"
              secret:
                secretName: "{{ meta.name }}-conjur-ssl-cert"
                # Permission == 0400. JSON spec doesn’t support octal notation.
                defaultMode: 256
            - name: "{{ meta.name }}-conjur-ssl-ca-cert-volume"
              secret:
                secretName: "{{ meta.name }}-conjur-ssl-ca-cert"
                # Permission == 0400. JSON spec doesn’t support octal notation.
                defaultMode: 256
            - name: "{{ meta.name }}-conjur-configmap-volume"
              configMap:
                name: "{{ meta.name }}-conjur-nginx-configmap"
                items:
                  - key: nginx_conf
                    path: nginx.conf
                  - key: mime_types
                    path: mime.types
                  - key: dhparams
                    path: dhparams.pem
                  - key: conjur_site
                    path: sites-enabled/conjur.conf
            containers:
            - name: "{{ meta.name }}-nginx"
              image: "{{ nginx.image.repository }}:{{ nginx.image.tag }}"
              imagePullPolicy: "{{ nginx.image.pullPolicy }}"
              ports:
              - containerPort: 9443
                name: https
              - containerPort: 9000
                name: http
              livenessProbe:
                httpGet:
                  path: /status
                  scheme: HTTPS
                  port: https
                initialDelaySeconds: 1
                periodSeconds: 5
                timeoutSeconds: 3
                # 1 seconds * 180 = 3 minutes
                failureThreshold: 180
              readinessProbe:
                httpGet:
                  path: /status
                  scheme: HTTPS
                  port: https
                initialDelaySeconds: 1
                periodSeconds: 5
                timeoutSeconds: 3
                # 1 seconds * 180 = 3 minutes
                failureThreshold: 180
              volumeMounts:
              - name: "{{ meta.name }}-conjur-ssl-cert-volume"
                mountPath: /opt/conjur/etc/ssl/cert
                readOnly: true
              - name: "{{ meta.name }}-conjur-ssl-ca-cert-volume"
                mountPath: /opt/conjur/etc/ssl/ca
                readOnly: true
              - name: "{{ meta.name }}-conjur-configmap-volume"
                mountPath: /etc/nginx
                readOnly: true
            - name: "{{ meta.name }}"
              image: "{{ image.repository }}:{{ image.tag }}"
              imagePullPolicy: "{{ image.pullPolicy }}"
              args: ["server"]
              ports:
                - name: http
                  containerPort: 80
                  protocol: TCP
              livenessProbe:
                httpGet:
                  path: /
                  port: 80
                initialDelaySeconds: 1
                periodSeconds: 5
                timeoutSeconds: 2
                # 1 seconds * 180 = 3 minutes
                failureThreshold: 180
              readinessProbe:
                httpGet:
                  path: /
                  port: http
                initialDelaySeconds: 1
                periodSeconds: 30
                timeoutSeconds: 30
                # 1 seconds * 180 = 3 minutes
                failureThreshold: 180
              env:
              - name: CONJUR_AUTHENTICATORS
                valueFrom:
                  secretKeyRef:
                    name: "{{ meta.name }}-conjur-authenticators"
                    key: key
              - name: CONJUR_DATA_KEY
                valueFrom:
                  secretKeyRef:
                    name: "{{ meta.name }}-conjur-data-key"
                    key: key
              - name: DATABASE_URL
                valueFrom:
                  secretKeyRef:
                    name: "{{ meta.name }}-conjur-database-url"
                    key: key
              - name: CONJUR_ACCOUNT
                value: "{{ account }}"
              resources:
                "{{ resources }}"
            nodeSelector:
              "{{ nodeSelector }}"
            affinity:
              "{{ affinity }}"
            tolerations:
              "{{ tolerations }}"

